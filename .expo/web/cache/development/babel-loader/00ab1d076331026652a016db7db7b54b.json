{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar WebBrowser = _interopRequireWildcard(require(\"expo-web-browser\"));\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _expoAuthSession = require(\"expo-auth-session\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _Button = _interopRequireDefault(require(\"react-native-web/dist/exports/Button\"));\n\nvar _qs = _interopRequireDefault(require(\"qs\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _this = this,\n    _jsxFileName = \"/Users/coryortega/Desktop/Projects/React-Native/components/LoginButton.tsx\";\n\nWebBrowser.maybeCompleteAuthSession();\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token'\n};\n\nvar storeData = function storeData(value) {\n  return _regenerator.default.async(function storeData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regenerator.default.awrap(_asyncStorage.default.setItem('code', value));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar LoginButton = function LoginButton() {\n  var _useAuthRequest = (0, _expoAuthSession.useAuthRequest)({\n    clientId: '5d228af4d8fe45d5b1bb9702187643c0',\n    scopes: ['user-read-email', 'playlist-modify-public'],\n    usePKCE: false,\n    redirectUri: 'http://localhost:19006/'\n  }, discovery),\n      _useAuthRequest2 = (0, _slicedToArray2.default)(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var code = response.params.code;\n      var headers = {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        auth: {\n          username: '5d228af4d8fe45d5b1bb9702187643c0',\n          password: '2e64ed63024a402d81fde645767a3680'\n        }\n      };\n      var data = {\n        grant_type: 'client_credentials',\n        code: code,\n        scope: 'user-top-read'\n      };\n\n      _axios.default.post('https://accounts.spotify.com/api/token', _qs.default.stringify(data), headers).then(function (res) {\n        var token = res.data;\n\n        _axios.default.post(\"https://tenderfy.herokuapp.com/user-token\", token, headers).then(function (res) {\n          console.log(res);\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, [response]);\n  var navigation = (0, _native.useNavigation)();\n  return React.createElement(_Button.default, {\n    disabled: !request,\n    title: (response == null ? void 0 : response.type) === 'success' ? \"Logged In \" : \"Login\",\n    onPress: function onPress() {\n      promptAsync();\n      navigation.navigate('TabOne', {\n        name: 'TabOne'\n      });\n    },\n    __self: _this,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  });\n};\n\nvar _default = LoginButton;\nexports.default = _default;","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/components/LoginButton.tsx"],"names":["WebBrowser","maybeCompleteAuthSession","discovery","authorizationEndpoint","tokenEndpoint","storeData","value","AsyncStorage","setItem","console","log","LoginButton","clientId","scopes","usePKCE","redirectUri","request","response","promptAsync","React","useEffect","type","code","params","headers","Accept","auth","username","password","data","grant_type","scope","axios","post","qs","stringify","then","res","token","catch","err","navigation","navigate","name"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;AACA;;;;;AAEAA,UAAU,CAACC,wBAAX;AAGA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAE,wCADP;AAEhBC,EAAAA,aAAa,EAAE;AAFC,CAAlB;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAENC,sBAAaC,OAAb,CAAqB,MAArB,EAA6BF,KAA7B,CAFM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIZG,UAAAA,OAAO,CAACC,GAAR;;AAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,wBACiB,qCACvC;AACEC,IAAAA,QAAQ,EAAE,kCADZ;AAEEC,IAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,wBAApB,CAFV;AAKEC,IAAAA,OAAO,EAAE,KALX;AAOEC,IAAAA,WAAW,EAAE;AAPf,GADuC,EAcvCb,SAduC,CADjB;AAAA;AAAA,MACjBc,OADiB;AAAA,MACRC,QADQ;AAAA,MACEC,WADF;;AAkBxBC,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAAAH,QAAQ,QAAR,YAAAA,QAAQ,CAAEI,IAAV,MAAmB,SAAvB,EAAkC;AAAA,UACtBC,IADsB,GACbL,QAAQ,CAACM,MADI,CACtBD,IADsB;AAE9B,UAAME,OAAO,GAAG;AACZA,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SADG;AAKZC,QAAAA,IAAI,EAAE;AACJC,UAAAA,QAAQ,EAAE,kCADN;AAEJC,UAAAA,QAAQ,EAAE;AAFN;AALM,OAAhB;AAUA,UAAMC,IAAI,GAAG;AACTC,QAAAA,UAAU,EAAE,oBADH;AAETR,QAAAA,IAAI,EAAEA,IAFG;AAGTS,QAAAA,KAAK,EAAE;AAHE,OAAb;;AAMAC,qBAAMC,IAAN,CAAW,wCAAX,EAAqDC,YAAGC,SAAH,CAAaN,IAAb,CAArD,EAAyEL,OAAzE,EACCY,IADD,CACM,UAAAC,GAAG,EAAI;AACT,YAAMC,KAAK,GAAGD,GAAG,CAACR,IAAlB;;AACAG,uBAAMC,IAAN,CAAW,2CAAX,EAAwDK,KAAxD,EAA+Dd,OAA/D,EACCY,IADD,CACM,UAAAC,GAAG,EAAI;AACT5B,UAAAA,OAAO,CAACC,GAAR,CAAY2B,GAAZ;AACH,SAHD,EAICE,KAJD,CAIO,UAAAC,GAAG,EAAI;AACV/B,UAAAA,OAAO,CAACC,GAAR,CAAY8B,GAAZ;AACH,SAND;AAOH,OAVD,EAWCD,KAXD,CAWO,UAAAC,GAAG,EAAI;AACV/B,QAAAA,OAAO,CAACC,GAAR,CAAY8B,GAAZ;AACH,OAbD;AAcD;AACJ,GAlCD,EAkCG,CAACvB,QAAD,CAlCH;AAoCA,MAAMwB,UAAU,GAAG,4BAAnB;AAEA,SACE,oBAAC,eAAD;AACE,IAAA,QAAQ,EAAE,CAACzB,OADb;AAEE,IAAA,KAAK,EAAE,CAAAC,QAAQ,QAAR,YAAAA,QAAQ,CAAEI,IAAV,MAAmB,SAAnB,GAA+B,YAA/B,GAA4C,OAFrD;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbH,MAAAA,WAAW;AACXuB,MAAAA,UAAU,CAACC,QAAX,CAAoB,QAApB,EAA8B;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA9B;AAEC,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAnED;;eAqEehC,W","sourcesContent":["import * as React from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { useNavigation } from '@react-navigation/native';\nimport { Button } from 'react-native';\nimport qs from 'qs';\nimport axios from 'axios';\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\n};\n\nconst storeData = async (value: string) => {\n    try {\n      await AsyncStorage.setItem('code', value)\n    } catch (e) {\n      console.log(e)\n    }\n};\n\nconst LoginButton = () => {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: '5d228af4d8fe45d5b1bb9702187643c0',\n      scopes: ['user-read-email', 'playlist-modify-public'],\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\n      // this must be set to false\n      usePKCE: false,\n      // For usage in managed apps using the proxy\n      redirectUri: 'http://localhost:19006/'\n    //   redirectUri: makeRedirectUri({\n    //     // For usage in bare and standalone\n    //     native: 'https://www.google.com/',\n    //   }),\n    },\n    discovery\n  );\n\n  React.useEffect(() => {\n    if (response?.type === 'success') {\n        const { code } = response.params;\n        const headers = {\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            auth: {\n              username: '5d228af4d8fe45d5b1bb9702187643c0',\n              password: '2e64ed63024a402d81fde645767a3680',\n            },\n        };\n        const data = {\n            grant_type: 'client_credentials',\n            code: code,\n            scope: 'user-top-read'\n        };\n\n        axios.post('https://accounts.spotify.com/api/token', qs.stringify(data), headers)\n        .then(res => {\n            const token = res.data\n            axios.post(\"https://tenderfy.herokuapp.com/user-token\", token, headers)\n            .then(res => {\n                console.log(res)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        })\n        .catch(err => {\n            console.log(err)\n        })\n      }\n  }, [response]);\n\n  const navigation = useNavigation();\n\n  return (\n    <Button\n      disabled={!request}\n      title={response?.type === 'success' ? \"Logged In \":\"Login\"}\n      onPress={() => {\n        promptAsync();\n        navigation.navigate('TabOne', { name: 'TabOne' })\n        // response?.type === 'success' ? props.navigation.navigate('Home')\n        }}\n    />\n  );\n}\n\nexport default LoginButton"]},"metadata":{},"sourceType":"script"}