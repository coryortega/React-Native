{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revoke = exports.refresh = exports.authorize = exports.register = exports.prefetchConfiguration = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _NativeModules = _interopRequireDefault(require(\"react-native-web/dist/exports/NativeModules\"));\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _reactNativeBase = _interopRequireDefault(require(\"react-native-base64\"));\n\nvar RNAppAuth = _NativeModules.default.RNAppAuth;\n\nvar validateIssuerOrServiceConfigurationEndpoints = function validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration) {\n  return (0, _invariant.default)(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.authorizationEndpoint === 'string' && typeof serviceConfiguration.tokenEndpoint === 'string', 'Config error: you must provide either an issuer or a service endpoints');\n};\n\nvar validateIssuerOrServiceConfigurationRegistrationEndpoint = function validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration) {\n  return (0, _invariant.default)(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string', 'Config error: you must provide either an issuer or a registration endpoint');\n};\n\nvar validateIssuerOrServiceConfigurationRevocationEndpoint = function validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration) {\n  return (0, _invariant.default)(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string', 'Config error: you must provide either an issuer or a revocation endpoint');\n};\n\nvar validateClientId = function validateClientId(clientId) {\n  return (0, _invariant.default)(typeof clientId === 'string', 'Config error: clientId must be a string');\n};\n\nvar validateRedirectUrl = function validateRedirectUrl(redirectUrl) {\n  return (0, _invariant.default)(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\n};\n\nvar validateHeaders = function validateHeaders(headers) {\n  if (!headers) {\n    return;\n  }\n\n  var customHeaderTypeErrorMessage = 'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n  var authorizedKeys = ['token', 'authorize', 'register'];\n  var keys = Object.keys(headers);\n  var correctKeys = keys.filter(function (key) {\n    return authorizedKeys.includes(key);\n  });\n  (0, _invariant.default)(keys.length <= authorizedKeys.length && correctKeys.length > 0 && correctKeys.length === keys.length, customHeaderTypeErrorMessage);\n  Object.values(headers).forEach(function (value) {\n    (0, _invariant.default)(typeof value === 'object', customHeaderTypeErrorMessage);\n    (0, _invariant.default)(Object.values(value).filter(function (key) {\n      return typeof key !== 'string';\n    }).length === 0, customHeaderTypeErrorMessage);\n  });\n};\n\nvar prefetchConfiguration = function prefetchConfiguration(_ref) {\n  var warmAndPrefetchChrome, issuer, redirectUrl, clientId, scopes, serviceConfiguration, _ref$dangerouslyAllow, dangerouslyAllowInsecureHttpRequests, customHeaders, nativeMethodArguments;\n\n  return _regenerator.default.async(function prefetchConfiguration$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          warmAndPrefetchChrome = _ref.warmAndPrefetchChrome, issuer = _ref.issuer, redirectUrl = _ref.redirectUrl, clientId = _ref.clientId, scopes = _ref.scopes, serviceConfiguration = _ref.serviceConfiguration, _ref$dangerouslyAllow = _ref.dangerouslyAllowInsecureHttpRequests, dangerouslyAllowInsecureHttpRequests = _ref$dangerouslyAllow === void 0 ? false : _ref$dangerouslyAllow, customHeaders = _ref.customHeaders;\n\n          if (_Platform.default.OS === 'android') {\n            validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n            validateClientId(clientId);\n            validateRedirectUrl(redirectUrl);\n            validateHeaders(customHeaders);\n            nativeMethodArguments = [warmAndPrefetchChrome, issuer, redirectUrl, clientId, scopes, serviceConfiguration, dangerouslyAllowInsecureHttpRequests, customHeaders];\n            RNAppAuth.prefetchConfiguration.apply(RNAppAuth, nativeMethodArguments);\n          }\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.prefetchConfiguration = prefetchConfiguration;\n\nvar register = function register(_ref2) {\n  var issuer = _ref2.issuer,\n      redirectUrls = _ref2.redirectUrls,\n      responseTypes = _ref2.responseTypes,\n      grantTypes = _ref2.grantTypes,\n      subjectType = _ref2.subjectType,\n      tokenEndpointAuthMethod = _ref2.tokenEndpointAuthMethod,\n      additionalParameters = _ref2.additionalParameters,\n      serviceConfiguration = _ref2.serviceConfiguration,\n      _ref2$dangerouslyAllo = _ref2.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref2$dangerouslyAllo === void 0 ? false : _ref2$dangerouslyAllo,\n      customHeaders = _ref2.customHeaders;\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  (0, _invariant.default)(Array.isArray(redirectUrls) && redirectUrls.every(function (url) {\n    return typeof url === 'string';\n  }), 'Config error: redirectUrls must be an Array of strings');\n  (0, _invariant.default)(responseTypes == null || Array.isArray(responseTypes) && responseTypes.every(function (rt) {\n    return typeof rt === 'string';\n  }), 'Config error: if provided, responseTypes must be an Array of strings');\n  (0, _invariant.default)(grantTypes == null || Array.isArray(grantTypes) && grantTypes.every(function (gt) {\n    return typeof gt === 'string';\n  }), 'Config error: if provided, grantTypes must be an Array of strings');\n  (0, _invariant.default)(subjectType == null || typeof subjectType === 'string', 'Config error: if provided, subjectType must be a string');\n  (0, _invariant.default)(tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string', 'Config error: if provided, tokenEndpointAuthMethod must be a string');\n  var nativeMethodArguments = [issuer, redirectUrls, responseTypes, grantTypes, subjectType, tokenEndpointAuthMethod, additionalParameters, serviceConfiguration];\n\n  if (_Platform.default.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  return RNAppAuth.register.apply(RNAppAuth, nativeMethodArguments);\n};\n\nexports.register = register;\n\nvar authorize = function authorize(_ref3) {\n  var issuer = _ref3.issuer,\n      redirectUrl = _ref3.redirectUrl,\n      clientId = _ref3.clientId,\n      clientSecret = _ref3.clientSecret,\n      scopes = _ref3.scopes,\n      _ref3$useNonce = _ref3.useNonce,\n      useNonce = _ref3$useNonce === void 0 ? true : _ref3$useNonce,\n      _ref3$usePKCE = _ref3.usePKCE,\n      usePKCE = _ref3$usePKCE === void 0 ? true : _ref3$usePKCE,\n      additionalParameters = _ref3.additionalParameters,\n      serviceConfiguration = _ref3.serviceConfiguration,\n      _ref3$clientAuthMetho = _ref3.clientAuthMethod,\n      clientAuthMethod = _ref3$clientAuthMetho === void 0 ? 'basic' : _ref3$clientAuthMetho,\n      _ref3$dangerouslyAllo = _ref3.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref3$dangerouslyAllo === void 0 ? false : _ref3$dangerouslyAllo,\n      customHeaders = _ref3.customHeaders,\n      _ref3$skipCodeExchang = _ref3.skipCodeExchange,\n      skipCodeExchange = _ref3$skipCodeExchang === void 0 ? false : _ref3$skipCodeExchang;\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  var nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, scopes, additionalParameters, serviceConfiguration, skipCodeExchange];\n\n  if (_Platform.default.OS === 'android') {\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (_Platform.default.OS === 'ios') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n  }\n\n  return RNAppAuth.authorize.apply(RNAppAuth, nativeMethodArguments);\n};\n\nexports.authorize = authorize;\n\nvar refresh = function refresh(_ref4, _ref5) {\n  var issuer = _ref4.issuer,\n      redirectUrl = _ref4.redirectUrl,\n      clientId = _ref4.clientId,\n      clientSecret = _ref4.clientSecret,\n      scopes = _ref4.scopes,\n      additionalParameters = _ref4.additionalParameters,\n      serviceConfiguration = _ref4.serviceConfiguration,\n      _ref4$clientAuthMetho = _ref4.clientAuthMethod,\n      clientAuthMethod = _ref4$clientAuthMetho === void 0 ? 'basic' : _ref4$clientAuthMetho,\n      _ref4$dangerouslyAllo = _ref4.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref4$dangerouslyAllo === void 0 ? false : _ref4$dangerouslyAllo,\n      customHeaders = _ref4.customHeaders;\n  var refreshToken = _ref5.refreshToken;\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  (0, _invariant.default)(refreshToken, 'Please pass in a refresh token');\n  var nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, refreshToken, scopes, additionalParameters, serviceConfiguration];\n\n  if (_Platform.default.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  return RNAppAuth.refresh.apply(RNAppAuth, nativeMethodArguments);\n};\n\nexports.refresh = refresh;\n\nvar revoke = function revoke(_ref6, _ref7) {\n  var clientId, issuer, serviceConfiguration, clientSecret, tokenToRevoke, _ref7$sendClientId, sendClientId, _ref7$includeBasicAut, includeBasicAuth, revocationEndpoint, response, openidConfig, headers;\n\n  return _regenerator.default.async(function revoke$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          clientId = _ref6.clientId, issuer = _ref6.issuer, serviceConfiguration = _ref6.serviceConfiguration, clientSecret = _ref6.clientSecret;\n          tokenToRevoke = _ref7.tokenToRevoke, _ref7$sendClientId = _ref7.sendClientId, sendClientId = _ref7$sendClientId === void 0 ? false : _ref7$sendClientId, _ref7$includeBasicAut = _ref7.includeBasicAuth, includeBasicAuth = _ref7$includeBasicAut === void 0 ? false : _ref7$includeBasicAut;\n          (0, _invariant.default)(tokenToRevoke, 'Please include the token to revoke');\n          validateClientId(clientId);\n          validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n\n          if (!(serviceConfiguration && serviceConfiguration.revocationEndpoint)) {\n            _context2.next = 9;\n            break;\n          }\n\n          revocationEndpoint = serviceConfiguration.revocationEndpoint;\n          _context2.next = 17;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return _regenerator.default.awrap(fetch(issuer + \"/.well-known/openid-configuration\"));\n\n        case 11:\n          response = _context2.sent;\n          _context2.next = 14;\n          return _regenerator.default.awrap(response.json());\n\n        case 14:\n          openidConfig = _context2.sent;\n          (0, _invariant.default)(openidConfig.revocation_endpoint, 'The openid config does not specify a revocation endpoint');\n          revocationEndpoint = openidConfig.revocation_endpoint;\n\n        case 17:\n          headers = {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          };\n\n          if (includeBasicAuth) {\n            headers.Authorization = \"Basic \" + _reactNativeBase.default.encode(clientId + \":\" + clientSecret);\n          }\n\n          _context2.next = 21;\n          return _regenerator.default.awrap(fetch(revocationEndpoint, {\n            method: 'POST',\n            headers: headers,\n            body: \"token=\" + tokenToRevoke + (sendClientId ? \"&client_id=\" + clientId : '')\n          }).catch(function (error) {\n            throw new Error('Failed to revoke token', error);\n          }));\n\n        case 21:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.revoke = revoke;","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/node_modules/react-native-app-auth/index.js"],"names":["RNAppAuth","NativeModules","validateIssuerOrServiceConfigurationEndpoints","issuer","serviceConfiguration","authorizationEndpoint","tokenEndpoint","validateIssuerOrServiceConfigurationRegistrationEndpoint","registrationEndpoint","validateIssuerOrServiceConfigurationRevocationEndpoint","revocationEndpoint","validateClientId","clientId","validateRedirectUrl","redirectUrl","validateHeaders","headers","customHeaderTypeErrorMessage","authorizedKeys","keys","Object","correctKeys","filter","key","includes","length","values","forEach","value","prefetchConfiguration","warmAndPrefetchChrome","scopes","dangerouslyAllowInsecureHttpRequests","customHeaders","Platform","OS","nativeMethodArguments","register","redirectUrls","responseTypes","grantTypes","subjectType","tokenEndpointAuthMethod","additionalParameters","Array","isArray","every","url","rt","gt","push","authorize","clientSecret","useNonce","usePKCE","clientAuthMethod","skipCodeExchange","refresh","refreshToken","revoke","tokenToRevoke","sendClientId","includeBasicAuth","fetch","response","json","openidConfig","revocation_endpoint","Authorization","base64","encode","method","body","catch","error","Error"],"mappings":"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","sourcesContent":["import invariant from 'invariant';\nimport { NativeModules, Platform } from 'react-native';\nimport base64 from 'react-native-base64';\n\nconst { RNAppAuth } = NativeModules;\n\nconst validateIssuerOrServiceConfigurationEndpoints = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration &&\n        typeof serviceConfiguration.authorizationEndpoint === 'string' &&\n        typeof serviceConfiguration.tokenEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a service endpoints'\n  );\nconst validateIssuerOrServiceConfigurationRegistrationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a registration endpoint'\n  );\nconst validateIssuerOrServiceConfigurationRevocationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a revocation endpoint'\n  );\nconst validateClientId = clientId =>\n  invariant(typeof clientId === 'string', 'Config error: clientId must be a string');\nconst validateRedirectUrl = redirectUrl =>\n  invariant(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\n\nconst validateHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n  const customHeaderTypeErrorMessage =\n    'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n\n  const authorizedKeys = ['token', 'authorize', 'register'];\n  const keys = Object.keys(headers);\n  const correctKeys = keys.filter(key => authorizedKeys.includes(key));\n  invariant(\n    keys.length <= authorizedKeys.length &&\n      correctKeys.length > 0 &&\n      correctKeys.length === keys.length,\n    customHeaderTypeErrorMessage\n  );\n\n  Object.values(headers).forEach(value => {\n    invariant(typeof value === 'object', customHeaderTypeErrorMessage);\n    invariant(\n      Object.values(value).filter(key => typeof key !== 'string').length === 0,\n      customHeaderTypeErrorMessage\n    );\n  });\n};\n\nexport const prefetchConfiguration = async ({\n  warmAndPrefetchChrome,\n  issuer,\n  redirectUrl,\n  clientId,\n  scopes,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n}) => {\n  if (Platform.OS === 'android') {\n    validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n    validateClientId(clientId);\n    validateRedirectUrl(redirectUrl);\n    validateHeaders(customHeaders);\n\n    const nativeMethodArguments = [\n      warmAndPrefetchChrome,\n      issuer,\n      redirectUrl,\n      clientId,\n      scopes,\n      serviceConfiguration,\n      dangerouslyAllowInsecureHttpRequests,\n      customHeaders,\n    ];\n\n    RNAppAuth.prefetchConfiguration(...nativeMethodArguments);\n  }\n};\n\nexport const register = ({\n  issuer,\n  redirectUrls,\n  responseTypes,\n  grantTypes,\n  subjectType,\n  tokenEndpointAuthMethod,\n  additionalParameters,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n}) => {\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  invariant(\n    Array.isArray(redirectUrls) && redirectUrls.every(url => typeof url === 'string'),\n    'Config error: redirectUrls must be an Array of strings'\n  );\n  invariant(\n    responseTypes == null ||\n      (Array.isArray(responseTypes) && responseTypes.every(rt => typeof rt === 'string')),\n    'Config error: if provided, responseTypes must be an Array of strings'\n  );\n  invariant(\n    grantTypes == null ||\n      (Array.isArray(grantTypes) && grantTypes.every(gt => typeof gt === 'string')),\n    'Config error: if provided, grantTypes must be an Array of strings'\n  );\n  invariant(\n    subjectType == null || typeof subjectType === 'string',\n    'Config error: if provided, subjectType must be a string'\n  );\n  invariant(\n    tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string',\n    'Config error: if provided, tokenEndpointAuthMethod must be a string'\n  );\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrls,\n    responseTypes,\n    grantTypes,\n    subjectType,\n    tokenEndpointAuthMethod,\n    additionalParameters,\n    serviceConfiguration,\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  return RNAppAuth.register(...nativeMethodArguments);\n};\n\nexport const authorize = ({\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  useNonce = true,\n  usePKCE = true,\n  additionalParameters,\n  serviceConfiguration,\n  clientAuthMethod = 'basic',\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  skipCodeExchange = false,\n}) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    skipCodeExchange,\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n  }\n\n  return RNAppAuth.authorize(...nativeMethodArguments);\n};\n\nexport const refresh = (\n  {\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    clientAuthMethod = 'basic',\n    dangerouslyAllowInsecureHttpRequests = false,\n    customHeaders,\n  },\n  { refreshToken }\n) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  invariant(refreshToken, 'Please pass in a refresh token');\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    refreshToken,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  return RNAppAuth.refresh(...nativeMethodArguments);\n};\n\nexport const revoke = async (\n  { clientId, issuer, serviceConfiguration, clientSecret },\n  { tokenToRevoke, sendClientId = false, includeBasicAuth = false }\n) => {\n  invariant(tokenToRevoke, 'Please include the token to revoke');\n  validateClientId(clientId);\n  validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The openid config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n  if (includeBasicAuth) {\n    headers.Authorization = `Basic ${base64.encode(`${clientId}:${clientSecret}`)}`;\n  }\n  /**\n    Identity Server insists on client_id being passed in the body,\n    but Google does not. According to the spec, Google is right\n    so defaulting to no client_id\n    https://tools.ietf.org/html/rfc7009#section-2.1\n  **/\n  return await fetch(revocationEndpoint, {\n    method: 'POST',\n    headers,\n    body: `token=${tokenToRevoke}${sendClientId ? `&client_id=${clientId}` : ''}`,\n  }).catch(error => {\n    throw new Error('Failed to revoke token', error);\n  });\n};\n"]},"metadata":{},"sourceType":"script"}