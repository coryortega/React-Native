{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useSpotifyAuth;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _Platform = _interopRequireDefault(require(\"react-native-web/dist/exports/Platform\"));\n\nvar _expoAuthSession = require(\"expo-auth-session\");\n\nvar WebBrowser = _interopRequireWildcard(require(\"expo-web-browser\"));\n\nvar _api = require(\"../api\");\n\nvar _context2 = require(\"../components/context\");\n\nvar discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n};\nvar CLIENT_ID = '5d228af4d8fe45d5b1bb9702187643c0';\nWebBrowser.maybeCompleteAuthSession();\n\nfunction useSpotifyAuth() {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(false),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      isAuthenticated = _useState4[0],\n      setIsAuthenticated = _useState4[1];\n\n  var _useContext = (0, _react.useContext)(_context2.AuthContext),\n      signIn = _useContext.signIn;\n\n  var _useAuthRequest = (0, _expoAuthSession.useAuthRequest)({\n    clientId: CLIENT_ID,\n    usePKCE: false,\n    scopes: [\"streaming\", \"user-read-email\", \"playlist-modify-public\", \"playlist-read-private\", \"user-read-playback-state\", \"app-remote-control\", \"user-read-playback-state\", \"user-modify-playback-state\", \"user-read-currently-playing\", \"user-library-read\"],\n    redirectUri: _Platform.default.OS === 'ios' ? 'exp://ep-rs6.coryortega.react-native.exp.direct:80' : 'http://localhost:19006/',\n    extraParams: {\n      show_dialog: \"true\"\n    }\n  }, discovery),\n      _useAuthRequest2 = (0, _slicedToArray2.default)(_useAuthRequest, 3),\n      authRequest = _useAuthRequest2[0],\n      authResponse = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  (0, _react.useEffect)(function () {\n    function updateFromAuthResponseAsync() {\n      var result, _result$error;\n\n      return _regenerator.default.async(function updateFromAuthResponseAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(authResponse === null)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!(authResponse.type === \"error\")) {\n                _context.next = 9;\n                break;\n              }\n\n              setError(authResponse.error);\n              return _context.abrupt(\"return\");\n\n            case 9:\n              if (!(authResponse.type === \"success\")) {\n                _context.next = 15;\n                break;\n              }\n\n              console.log(\"success\");\n              _context.next = 13;\n              return _regenerator.default.awrap((0, _api.fetchTokenAsync)(authResponse.params.code));\n\n            case 13:\n              result = _context.sent;\n\n              if (result.error || !result.token) {\n                setError((_result$error = result.error) != null ? _result$error : \"Unknown error\");\n              } else {\n                signIn(result);\n                setIsAuthenticated(true);\n              }\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    if (!isAuthenticated) {\n      updateFromAuthResponseAsync();\n    }\n  }, [authResponse]);\n  return {\n    error: error,\n    isAuthenticated: isAuthenticated,\n    authenticateAsync: function authenticateAsync() {\n      return promptAsync();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/hooks/useSpotifyAuth.ts"],"names":["discovery","authorizationEndpoint","tokenEndpoint","CLIENT_ID","WebBrowser","maybeCompleteAuthSession","useSpotifyAuth","error","setError","isAuthenticated","setIsAuthenticated","AuthContext","signIn","clientId","usePKCE","scopes","redirectUri","Platform","OS","extraParams","show_dialog","authRequest","authResponse","promptAsync","updateFromAuthResponseAsync","type","console","log","params","code","result","token","authenticateAsync"],"mappings":";;;;;;;;;;;;;AAAA;;;;AAEA;;AACA;;AACA;;AACA;;AAEA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAE,wCADP;AAEhBC,EAAAA,aAAa,EAAE;AAFC,CAAlB;AAKA,IAAMC,SAAS,GAAG,kCAAlB;AAEAC,UAAU,CAACC,wBAAX;;AAEe,SAASC,cAAT,GAA0B;AAAA,kBACb,qBAAqB,IAArB,CADa;AAAA;AAAA,MAChCC,KADgC;AAAA,MACzBC,QADyB;;AAAA,mBAEO,qBAAS,KAAT,CAFP;AAAA;AAAA,MAEhCC,eAFgC;AAAA,MAEfC,kBAFe;;AAAA,oBAGpB,uBAAWC,qBAAX,CAHoB;AAAA,MAG/BC,MAH+B,eAG/BA,MAH+B;;AAAA,wBAKU,qCAC/C;AACEC,IAAAA,QAAQ,EAAEV,SADZ;AAEEW,IAAAA,OAAO,EAAE,KAFX;AAGEC,IAAAA,MAAM,EAAE,CACN,WADM,EAEN,iBAFM,EAGN,wBAHM,EAIN,uBAJM,EAKN,0BALM,EAMN,oBANM,EAON,0BAPM,EAQN,4BARM,EASN,6BATM,EAUN,mBAVM,CAHV;AAeEC,IAAAA,WAAW,EAAEC,kBAASC,EAAT,KAAgB,KAAhB,GAAwB,oDAAxB,GAA+E,yBAf9F;AAgBEC,IAAAA,WAAW,EAAE;AAEXC,MAAAA,WAAW,EAAE;AAFF;AAhBf,GAD+C,EAsB/CpB,SAtB+C,CALV;AAAA;AAAA,MAKhCqB,WALgC;AAAA,MAKnBC,YALmB;AAAA,MAKLC,WALK;;AA8BvC,wBAAU,YAAM;AACd,aAAeC,2BAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACMF,YAAY,KAAK,IADvB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,oBAGaA,YAAY,CAACG,IAAb,KAAsB,OAHnC;AAAA;AAAA;AAAA;;AAIIjB,cAAAA,QAAQ,CAACc,YAAY,CAACf,KAAd,CAAR;AAJJ;;AAAA;AAAA,oBAMae,YAAY,CAACG,IAAb,KAAsB,SANnC;AAAA;AAAA;AAAA;;AAOMC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAPN;AAAA,gDAQyB,0BACnBL,YAAY,CAACM,MAAb,CAAoBC,IADD,CARzB;;AAAA;AAQUC,cAAAA,MARV;;AAWI,kBAAIA,MAAM,CAACvB,KAAP,IAAgB,CAACuB,MAAM,CAACC,KAA5B,EAAmC;AACjCvB,gBAAAA,QAAQ,kBAACsB,MAAM,CAACvB,KAAR,4BAAiB,eAAjB,CAAR;AACD,eAFD,MAEO;AAKLK,gBAAAA,MAAM,CAACkB,MAAD,CAAN;AACApB,gBAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBA,QAAI,CAACD,eAAL,EAAsB;AACpBe,MAAAA,2BAA2B;AAC5B;AACF,GA5BD,EA4BG,CAACF,YAAD,CA5BH;AA8BA,SAAO;AACLf,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,eAAe,EAAfA,eAFK;AAGLuB,IAAAA,iBAAiB,EAAE;AAAA,aAAMT,WAAW,EAAjB;AAAA;AAHd,GAAP;AAKD","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useAuthRequest, makeRedirectUri } from \"expo-auth-session\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport { fetchTokenAsync } from \"../api\";\nimport { AuthContext } from '../components/context';\n\nconst discovery = {\n  authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n  tokenEndpoint: \"https://accounts.spotify.com/api/token\",\n};\n\nconst CLIENT_ID = '5d228af4d8fe45d5b1bb9702187643c0';\n\nWebBrowser.maybeCompleteAuthSession();\n\nexport default function useSpotifyAuth() {\n  const [error, setError] = useState<any | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const { signIn } = useContext(AuthContext);\n\n  const [authRequest, authResponse, promptAsync] = useAuthRequest(\n    {\n      clientId: CLIENT_ID,\n      usePKCE: false,\n      scopes: [\n        \"streaming\",\n        \"user-read-email\",\n        \"playlist-modify-public\",\n        \"playlist-read-private\",\n        \"user-read-playback-state\",\n        \"app-remote-control\",\n        \"user-read-playback-state\",\n        \"user-modify-playback-state\",\n        \"user-read-currently-playing\",\n        \"user-library-read\",\n      ],\n      redirectUri: Platform.OS === 'ios' ? 'exp://ep-rs6.coryortega.react-native.exp.direct:80' : 'http://localhost:19006/',\n      extraParams: {\n        // On Android it will just skip right past sign in otherwise\n        show_dialog: \"true\",\n      },\n    },\n    discovery\n  );\n\n  useEffect(() => {\n    async function updateFromAuthResponseAsync() {\n      if (authResponse === null) {\n        return;\n      } else if (authResponse.type === \"error\") {\n        setError(authResponse.error);\n        return;\n      } else if (authResponse.type === \"success\") {\n          console.log(\"success\")\n        const result = await fetchTokenAsync(\n          authResponse.params.code\n        );\n        if (result.error || !result.token) {\n          setError(result.error ?? \"Unknown error\");\n        } else {\n        //   await LocalStorage.setAuthCredentialsAsync({\n        //     ...result,\n        //     lastRefreshed: new Date(),\n        //   });\n          signIn(result)\n          setIsAuthenticated(true);\n        }\n      }\n    }\n\n    if (!isAuthenticated) {\n      updateFromAuthResponseAsync();\n    }\n  }, [authResponse]);\n\n  return {\n    error,\n    isAuthenticated,\n    authenticateAsync: () => promptAsync(),\n  };\n}"]},"metadata":{},"sourceType":"script"}