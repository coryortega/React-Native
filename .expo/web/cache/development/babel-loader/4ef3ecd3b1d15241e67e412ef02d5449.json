{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRandomBytes = getRandomBytes;\nexports.getRandomBytesAsync = getRandomBytesAsync;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@unimodules/core\");\n\nvar _base64Js = require(\"base64-js\");\n\nvar _ExpoRandom = _interopRequireDefault(require(\"./ExpoRandom\"));\n\nfunction assertByteCount(value, methodName) {\n  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n    throw new TypeError(\"expo-random: \" + methodName + \"(\" + value + \") expected a valid number from range 0...1024\");\n  }\n}\n\nfunction getRandomBytes(byteCount) {\n  assertByteCount(byteCount, 'getRandomBytes');\n  var validByteCount = Math.floor(byteCount);\n\n  if (_ExpoRandom.default.getRandomBytes) {\n    return _ExpoRandom.default.getRandomBytes(validByteCount);\n  } else if (_ExpoRandom.default.getRandomBase64String) {\n    var base64 = _ExpoRandom.default.getRandomBase64String(validByteCount);\n\n    return (0, _base64Js.toByteArray)(base64);\n  } else {\n    throw new _core.UnavailabilityError('expo-random', 'getRandomBytes');\n  }\n}\n\nfunction getRandomBytesAsync(byteCount) {\n  var validByteCount, base64;\n  return _regenerator.default.async(function getRandomBytesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          assertByteCount(byteCount, 'getRandomBytesAsync');\n          validByteCount = Math.floor(byteCount);\n\n          if (!_ExpoRandom.default.getRandomBytesAsync) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 5;\n          return _regenerator.default.awrap(_ExpoRandom.default.getRandomBytesAsync(validByteCount));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n          if (!_ExpoRandom.default.getRandomBase64StringAsync) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 11;\n          return _regenerator.default.awrap(_ExpoRandom.default.getRandomBase64StringAsync(validByteCount));\n\n        case 11:\n          base64 = _context.sent;\n          return _context.abrupt(\"return\", (0, _base64Js.toByteArray)(base64));\n\n        case 15:\n          throw new _core.UnavailabilityError('expo-random', 'getRandomBytesAsync');\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Random.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA,SAAS,eAAT,CAAyB,KAAzB,EAAqC,UAArC,EAAuD;AACrD,MACE,OAAO,KAAP,KAAiB,QAAjB,IACA,KAAK,CAAC,KAAD,CADL,IAEA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,CAFpB,IAGA,IAAI,CAAC,KAAL,CAAW,KAAX,IAAoB,IAJtB,EAKE;AACA,UAAM,IAAI,SAAJ,mBACY,UADZ,SAC0B,KAD1B,mDAAN;AAGD;AACF;;AAEK,SAAU,cAAV,CAAyB,SAAzB,EAA0C;AAC9C,EAAA,eAAe,CAAC,SAAD,EAAY,gBAAZ,CAAf;AACA,MAAM,cAAc,GAAG,IAAI,CAAC,KAAL,CAAW,SAAX,CAAvB;;AACA,MAAI,oBAAW,cAAf,EAA+B;AAC7B,WAAO,oBAAW,cAAX,CAA0B,cAA1B,CAAP;AACD,GAFD,MAEO,IAAI,oBAAW,qBAAf,EAAsC;AAC3C,QAAM,MAAM,GAAG,oBAAW,qBAAX,CAAiC,cAAjC,CAAf;;AACA,WAAO,2BAAY,MAAZ,CAAP;AACD,GAHM,MAGA;AACL,UAAM,IAAI,yBAAJ,CAAwB,aAAxB,EAAuC,gBAAvC,CAAN;AACD;AACF;;AAEM,SAAe,mBAAf,CAAmC,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,UAAA,eAAe,CAAC,SAAD,EAAY,qBAAZ,CAAf;AACM,UAAA,cAFD,GAEkB,IAAI,CAAC,KAAL,CAAW,SAAX,CAFlB;;AAAA,eAGD,oBAAW,mBAHV;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAIU,oBAAW,mBAAX,CAA+B,cAA/B,CAJV;;AAAA;AAAA;;AAAA;AAAA,eAKM,oBAAW,0BALjB;AAAA;AAAA;AAAA;;AAAA;AAAA,4CAMkB,oBAAW,0BAAX,CAAsC,cAAtC,CANlB;;AAAA;AAMG,UAAA,MANH;AAAA,2CAOI,2BAAY,MAAZ,CAPJ;;AAAA;AAAA,gBASG,IAAI,yBAAJ,CAAwB,aAAxB,EAAuC,qBAAvC,CATH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\n\nimport ExpoRandom from './ExpoRandom';\n\nfunction assertByteCount(value: any, methodName: string): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-random: ${methodName}(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\nexport function getRandomBytes(byteCount: number): Uint8Array {\n  assertByteCount(byteCount, 'getRandomBytes');\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytes) {\n    return ExpoRandom.getRandomBytes(validByteCount);\n  } else if (ExpoRandom.getRandomBase64String) {\n    const base64 = ExpoRandom.getRandomBase64String(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytes');\n  }\n}\n\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount, 'getRandomBytesAsync');\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytesAsync) {\n    return await ExpoRandom.getRandomBytesAsync(validByteCount);\n  } else if (ExpoRandom.getRandomBase64StringAsync) {\n    const base64 = await ExpoRandom.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}