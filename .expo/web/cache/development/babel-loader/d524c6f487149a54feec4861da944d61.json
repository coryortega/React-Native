{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Navigation;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _stack = require(\"@react-navigation/stack\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Themed = require(\"../components/Themed\");\n\nvar _NotFoundScreen = _interopRequireDefault(require(\"../screens/NotFoundScreen\"));\n\nvar _ModalScreen = _interopRequireDefault(require(\"../screens/ModalScreen\"));\n\nvar _BottomTabNavigator = _interopRequireDefault(require(\"./BottomTabNavigator\"));\n\nvar _LinkingConfiguration = _interopRequireDefault(require(\"./LinkingConfiguration\"));\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-async-storage/async-storage\"));\n\nvar _jsxFileName = \"/Users/coryortega/Desktop/Projects/React-Native/navigation/index.tsx\";\n\nfunction Navigation(_ref) {\n  var colorScheme = _ref.colorScheme;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      userToken = _React$useState4[0],\n      setUserToken = _React$useState4[1];\n\n  var getData = function getData() {\n    var value;\n    return _regenerator.default.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regenerator.default.awrap(_asyncStorage.default.getItem('token'));\n\n          case 3:\n            value = _context.sent;\n\n            if (!(value !== null)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", value);\n\n          case 6:\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  React.useEffect(function () {\n    getData().then(function (res) {\n      console.log(res);\n      setIsLoading(false);\n    }).catch(function (err) {\n      console.log();\n    });\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 4000);\n  }, []);\n\n  if (isLoading) {\n    return React.createElement(_Themed.View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, React.createElement(_Themed.Text, {\n      __self: this,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, \"Loading\"));\n  }\n\n  return React.createElement(_native.NavigationContainer, {\n    linking: _LinkingConfiguration.default,\n    theme: colorScheme === 'dark' ? _native.DarkTheme : _native.DefaultTheme,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(RootNavigator, {\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar Stack = (0, _stack.createStackNavigator)();\n\nfunction RootNavigator() {\n  return React.createElement(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Root\",\n    component: _BottomTabNavigator.default,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"NotFound\",\n    component: _NotFoundScreen.default,\n    options: {\n      title: 'Oops!'\n    },\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"MyModal\",\n    component: _ModalScreen.default,\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/navigation/index.tsx"],"names":["Navigation","colorScheme","React","useState","isLoading","setIsLoading","userToken","setUserToken","getData","AsyncStorage","getItem","value","console","log","useEffect","then","res","catch","err","setTimeout","flex","justifyContent","alignItems","LinkingConfiguration","DarkTheme","DefaultTheme","Stack","RootNavigator","headerShown","BottomTabNavigator","NotFoundScreen","title","ModalScreen"],"mappings":"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","sourcesContent":["import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\nimport { Text, View } from '../components/Themed';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport ModalScreen from '../screens/ModalScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [userToken, setUserToken] = React.useState(null);\n\n  const getData = async () => {\n    try {\n      const value = await AsyncStorage.getItem('token')\n      if(value !== null) {\n        return value\n      }\n    } catch(e) {\n      console.log(e)\n    }\n  }\n\n  React.useEffect(() => {\n    getData().then(res => {\n      console.log(res);\n      setIsLoading(false)\n    }).catch(err => {\n      console.log()\n    })\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 4000);\n  }, [])\n\n  if( isLoading ) {\n    return(\n    <View style={{flex:1,justifyContent:'center', alignItems:'center'}}>\n      <Text>Loading</Text>\n    </View>\n    )\n  }\n\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Screen name=\"MyModal\" component={ModalScreen} />\n    </Stack.Navigator>\n  );\n}\n"]},"metadata":{},"sourceType":"script"}