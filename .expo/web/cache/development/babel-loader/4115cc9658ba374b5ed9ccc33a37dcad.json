{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = LogginButton;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar WebBrowser = _interopRequireWildcard(require(\"expo-web-browser\"));\n\nvar _expoAuthSession = require(\"expo-auth-session\");\n\nvar _Button = _interopRequireDefault(require(\"react-native-web/dist/exports/Button\"));\n\nvar _jsxFileName = \"/Users/coryortega/Desktop/Projects/React-Native/components/LoginButton.tsx\";\nWebBrowser.maybeCompleteAuthSession();\nvar discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token'\n};\n\nfunction LogginButton() {\n  var _useAuthRequest = (0, _expoAuthSession.useAuthRequest)({\n    clientId: '5d228af4d8fe45d5b1bb9702187643c0',\n    scopes: ['user-read-email', 'playlist-modify-public'],\n    usePKCE: false,\n    redirectUri: (0, _expoAuthSession.makeRedirectUri)({\n      native: 'https://www.google.com/'\n    })\n  }, discovery),\n      _useAuthRequest2 = (0, _slicedToArray2.default)(_useAuthRequest, 3),\n      request = _useAuthRequest2[0],\n      response = _useAuthRequest2[1],\n      promptAsync = _useAuthRequest2[2];\n\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      var code = response.params.code;\n      console.log(code);\n    }\n  }, [response]);\n  return React.createElement(_Button.default, {\n    disabled: !request,\n    title: (response == null ? void 0 : response.type) === 'success' ? \"Logged In \" : \"Login\",\n    onPress: function onPress() {\n      promptAsync();\n    },\n    __self: this,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/components/LoginButton.tsx"],"names":["WebBrowser","maybeCompleteAuthSession","discovery","authorizationEndpoint","tokenEndpoint","LogginButton","clientId","scopes","usePKCE","redirectUri","native","request","response","promptAsync","React","useEffect","type","code","params","console","log"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;AAGAA,UAAU,CAACC,wBAAX;AAGA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAE,wCADP;AAEhBC,EAAAA,aAAa,EAAE;AAFC,CAAlB;;AAKe,SAASC,YAAT,GAAwB;AAAA,wBACI,qCACvC;AACEC,IAAAA,QAAQ,EAAE,kCADZ;AAEEC,IAAAA,MAAM,EAAE,CAAC,iBAAD,EAAoB,wBAApB,CAFV;AAKEC,IAAAA,OAAO,EAAE,KALX;AAOEC,IAAAA,WAAW,EAAE,sCAAgB;AAE3BC,MAAAA,MAAM,EAAE;AAFmB,KAAhB;AAPf,GADuC,EAavCR,SAbuC,CADJ;AAAA;AAAA,MAC9BS,OAD8B;AAAA,MACrBC,QADqB;AAAA,MACXC,WADW;;AAiBrCC,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAAAH,QAAQ,QAAR,YAAAA,QAAQ,CAAEI,IAAV,MAAmB,SAAvB,EAAkC;AAAA,UACxBC,IADwB,GACfL,QAAQ,CAACM,MADM,CACxBD,IADwB;AAEhCE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACC;AACJ,GALD,EAKG,CAACL,QAAD,CALH;AAOA,SACE,oBAAC,eAAD;AACE,IAAA,QAAQ,EAAE,CAACD,OADb;AAEE,IAAA,KAAK,EAAE,CAAAC,QAAQ,QAAR,YAAAA,QAAQ,CAAEI,IAAV,MAAmB,SAAnB,GAA+B,YAA/B,GAA4C,OAFrD;AAGE,IAAA,OAAO,EAAE,mBAAM;AACbH,MAAAA,WAAW;AACV,KALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import * as React from 'react';\nimport * as WebBrowser from 'expo-web-browser';\nimport { makeRedirectUri, useAuthRequest } from 'expo-auth-session';\nimport { Button } from 'react-native';\n\nWebBrowser.maybeCompleteAuthSession();\n\n// Endpoint\nconst discovery = {\n  authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n  tokenEndpoint: 'https://accounts.spotify.com/api/token',\n};\n\nexport default function LogginButton() {\n  const [request, response, promptAsync] = useAuthRequest(\n    {\n      clientId: '5d228af4d8fe45d5b1bb9702187643c0',\n      scopes: ['user-read-email', 'playlist-modify-public'],\n      // In order to follow the \"Authorization Code Flow\" to fetch token after authorizationEndpoint\n      // this must be set to false\n      usePKCE: false,\n      // For usage in managed apps using the proxy\n      redirectUri: makeRedirectUri({\n        // For usage in bare and standalone\n        native: 'https://www.google.com/',\n      }),\n    },\n    discovery\n  );\n\n  React.useEffect(() => {\n    if (response?.type === 'success') {\n      const { code } = response.params;\n      console.log(code);\n      }\n  }, [response]);\n\n  return (\n    <Button\n      disabled={!request}\n      title={response?.type === 'success' ? \"Logged In \":\"Login\"}\n      onPress={() => {\n        promptAsync();\n        }}\n    />\n  );\n}"]},"metadata":{},"sourceType":"script"}