{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useCachedResources;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _vectorIcons = require(\"@expo/vector-icons\");\n\nvar Font = _interopRequireWildcard(require(\"expo-font\"));\n\nvar SplashScreen = _interopRequireWildcard(require(\"expo-splash-screen\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction useCachedResources() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      var getData;\n      return _regenerator.default.async(function loadResourcesAndDataAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              SplashScreen.preventAutoHideAsync();\n\n              getData = function getData() {\n                var value;\n                return _regenerator.default.async(function getData$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return _regenerator.default.awrap(AsyncStorage.getItem('code'));\n\n                      case 3:\n                        value = _context.sent;\n\n                        if (!(value !== null)) {\n                          _context.next = 7;\n                          break;\n                        }\n\n                        console.log(value);\n                        return _context.abrupt(\"return\", value);\n\n                      case 7:\n                        _context.next = 12;\n                        break;\n\n                      case 9:\n                        _context.prev = 9;\n                        _context.t0 = _context[\"catch\"](0);\n                        console.log(_context.t0);\n\n                      case 12:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, [[0, 9]], Promise);\n              };\n\n              _context2.next = 5;\n              return _regenerator.default.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, _vectorIcons.Ionicons.font), {}, {\n                'space-mono': require(\"../assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 5:\n              _context2.next = 10;\n              break;\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.warn(_context2.t0);\n\n            case 10:\n              _context2.prev = 10;\n              setLoadingComplete(true);\n              SplashScreen.hideAsync();\n              return _context2.finish(10);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7, 10, 14]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["/Users/coryortega/Desktop/Projects/React-Native/hooks/useCachedResources.ts"],"names":["useCachedResources","React","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","SplashScreen","preventAutoHideAsync","getData","AsyncStorage","getItem","value","console","log","Font","loadAsync","Ionicons","font","require","warn","hideAsync"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEe,SAASA,kBAAT,GAA8B;AAAA,wBACKC,KAAK,CAACC,QAAN,CAAe,KAAf,CADL;AAAA;AAAA,MACpCC,iBADoC;AAAA,MACjBC,kBADiB;;AAI3CH,EAAAA,KAAK,CAACI,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIC,cAAAA,YAAY,CAACC,oBAAb;;AACMC,cAAAA,OAHV,GAGoB,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAEQC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAFR;;AAAA;AAENC,wBAAAA,KAFM;;AAAA,8BAGTA,KAAK,KAAK,IAHD;AAAA;AAAA;AAAA;;AAIVC,wBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAJU,yDAKHA,KALG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQZC,wBAAAA,OAAO,CAACC,GAAR;;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHpB;;AAAA;AAAA,gDAgBUC,IAAI,CAACC,SAAL,iCACDC,sBAASC,IADR;AAEJ,8BAAcC,OAAO;AAFjB,iBAhBV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsBIN,cAAAA,OAAO,CAACO,IAAR;;AAtBJ;AAAA;AAwBIhB,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAG,cAAAA,YAAY,CAACc,SAAb;AAzBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BAf,IAAAA,yBAAyB;AAC1B,GA/BD,EA+BG,EA/BH;AAiCA,SAAOH,iBAAP;AACD","sourcesContent":["import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n        const getData = async () => {\n          try {\n            const value = await AsyncStorage.getItem('code')\n            if(value !== null) {\n              console.log(value)\n              return value\n            }\n          } catch(e) {\n            console.log(e)\n          }\n        }\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"]},"metadata":{},"sourceType":"script"}